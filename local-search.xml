<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解：洛谷P11853</title>
    <link href="/2025/06/26/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P11853/"/>
    <url>/2025/06/26/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P11853/</url>
    
    <content type="html"><![CDATA[<h1>题解：洛谷P11853</h1><h2 id="题目简介">题目简介</h2><p>有一排树苗，树苗$i$的编号是$A_i$。给定$n$个区间，每次将这个区间内的树浇一次水，最后求出浇水最多的树苗浇了几次水。</p><h2 id="解题方法">解题方法</h2><p>容易发现浇水操作就是区间加上一个数，可以使用差分解决。</p><p>可以看出这就是一个差分模板。</p><hr><h3 id="注意如果-A-0-有可能就是浇水最多的树苗">注意如果$A_0$有可能就是浇水最多的树苗</h3><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,c[<span class="hljs-number">1000005</span>],ans=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        sum=<span class="hljs-built_in">max</span>(sum,b);<br>        c[a]++;<span class="hljs-comment">//差分模板</span><br>        c[b<span class="hljs-number">+1</span>]--;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=sum;i++)&#123;<span class="hljs-comment">//从0开始求前缀和</span><br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>)<span class="hljs-comment">//防止数组越界</span><br>            c[i]=c[i<span class="hljs-number">-1</span>]+c[i];<span class="hljs-comment">//求前缀和</span><br>        <span class="hljs-keyword">if</span>(c[i]&gt;ans)<br>            ans=c[i];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<span class="hljs-comment">//输出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法·理论：并查集</title>
    <link href="/2025/06/25/%E7%AE%97%E6%B3%95%C2%B7%E7%90%86%E8%AE%BA%EF%BC%9A%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2025/06/25/%E7%AE%97%E6%B3%95%C2%B7%E7%90%86%E8%AE%BA%EF%BC%9A%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1>算法·理论：并查集</h1><h2 id="并查集的介绍">并查集的介绍</h2><ul><li>并查集是一种可以高效处理不相交集合的合并与查询问题的数据结构</li><li>并查集有两种基本操作：</li></ul><blockquote><ol><li>合并</li><li>查询</li></ol></blockquote><p>并查集的合并操作通常时选择两个并查集的<strong>代表</strong>，将一个并查集的代表指向另一个并查集的代表。</p><p>并查集的查询操作就是找到这个并查集的<strong>代表</strong>。</p><p>使用一个<code>fa</code>数组保存父亲关系。</p><h2 id="题目简介">题目简介</h2><p>现在有一个并查集，你需要完成合并和查询操作。</p><h2 id="查找操作">查找操作</h2><blockquote><p>给定两个整数$x$，找到$x$所在集合的代表。</p></blockquote><p>我们可以判断<code>fa[x]</code>是否等于<code>x</code>，如果是，则已经找到<code>x</code>的代表，否则递归查找<code>x</code>的父亲，就是<code>fa[x]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<br>        <span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合并操作">合并操作</h2><blockquote><p>给定两个集合$x$和$y$，将$x$和$y$合并。</p></blockquote><p>我们可以找出$x$和$y$的代表，并合并。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    fa[<span class="hljs-built_in">find</span>(x)]=<span class="hljs-built_in">find</span>(y);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并查集的优化">并查集的优化</h2><p>但是我们发现查找操作还是不够快，如果并查集的父亲关系是一条链，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">fa[fa[x]]<br>|<br>fa[x]<br>|<br>x<br></code></pre></td></tr></table></figure><p>如果出现这种情况的话，当数量足够大的话，<code>fa</code>数组将会存不下这种关系，出现<code>MLE</code>的错误。</p><p>为了解决这种情况，我们可以把并查集的父亲关系改成这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">fa[fa[x]]<br>|       |<br>fa[x]   x<br></code></pre></td></tr></table></figure><p>这样可以节省很多空间，直接将<code>x</code>连到根节点以加快后续查询。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<br>        <span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="建立并查集时，所有元素的父亲都是它自己。">建立并查集时，所有元素的父亲都是它自己。</h3><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,op,x,y,fa[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">//查询操作</span><br>    <span class="hljs-keyword">if</span>(fa[x]==x)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-comment">//合并操作</span><br>    fa[<span class="hljs-built_in">find</span>(x)]=<span class="hljs-built_in">find</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        fa[i]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;x,&amp;y);<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<span class="hljs-comment">//第一种操作</span><br>            <span class="hljs-built_in">add</span>(x,y);<span class="hljs-comment">//合并</span><br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//第二种操作</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)==<span class="hljs-built_in">find</span>(y))<span class="hljs-comment">//如果在一个集合</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y\n&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法·理论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>题解：洛谷P1536</title>
    <link href="/2025/06/25/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P1536/"/>
    <url>/2025/06/25/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P1536/</url>
    
    <content type="html"><![CDATA[<h1>题解：洛谷P1536</h1><h2 id="题目简介">题目简介</h2><p>给定$n$个村庄和$m$条道路，求出还需建立多少条道路才能让所有村庄联通。</p><h2 id="解题方法">解题方法</h2><p>容易发现可以使用<code>并查集</code>的方法将两个村庄连起来，也就是<strong>合并</strong>操作。</p><p>经过$m$次道路的连接后，最后扫描每个村庄的父亲节点，如果是它自己的话说明这个村庄没有与任何村庄连接，需要建立道路，也就是<strong>查找父亲节点</strong>操作，最后让答案减一。</p><h3 id="查找父亲节点操作">查找父亲节点操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<br>        <span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并操作">合并操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    fa[<span class="hljs-built_in">find</span>(x)]=<span class="hljs-built_in">find</span>(y);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,fa[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">//查找父亲节点操作</span><br>    <span class="hljs-keyword">if</span>(fa[x]==x)<br>        <span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-comment">//合并操作</span><br>    fa[<span class="hljs-built_in">find</span>(x)]=<span class="hljs-built_in">find</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//一直读入直到n为0</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<span class="hljs-comment">//结束读入</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            fa[i]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-type">int</span> a,b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>            <span class="hljs-built_in">add</span>(a,b);<span class="hljs-comment">//添加路径</span><br>        &#125;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)==i)<span class="hljs-comment">//没有与其他村庄联通</span><br>                ans++;<span class="hljs-comment">//增加答案</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans<span class="hljs-number">-1</span>);<span class="hljs-comment">//点的数量减一就是边的数量，输出答案</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：ABC410C</title>
    <link href="/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC410C/"/>
    <url>/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC410C/</url>
    
    <content type="html"><![CDATA[<h1>题解：ABC410C</h1><h2 id="题目简介">题目简介</h2><p>有一个序列$A$，长度为$n$，初始$A_i=i$，有$Q$次操作：</p><ol><li><code>p x</code>，将$A_p$改为$x$。</li><li><code>p</code>，输出$A_p$。</li><li><code>k</code>，重复将$A$的第一个元素移动到末尾$k$次。</li></ol><h2 id="解题方法">解题方法</h2><p>$1 \leq N \leq 10^6$，$1 \leq Q \leq 3 \times 10^5$</p><p>对于第一种和第二种操作，都可以在$O(1)$的时间内完成。</p><p>但是第三种操作暴力移动会<code>TLE</code>。</p><h3 id="优化方法">优化方法</h3><p>可以维护一个<strong>偏移量</strong>$f$，对于第三种操作，直接将$f$加上$p$再对$n$<strong>取模</strong>，就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">f=(f+p)%n;<br></code></pre></td></tr></table></figure><p>对于前两种操作，需要<strong>计算</strong>一个<code>pos</code>让每次查询都获取到正确的位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> pos=(f+x<span class="hljs-number">-1</span>)%n<span class="hljs-number">+1</span>;<br></code></pre></td></tr></table></figure><p>因为如果使用从<code>1</code>开始的下标，如果使用<code>(f+x)%n</code>，如果$f+x=n$，就会出现访问$A_0$的情况。</p><p>将$f+x$减一后模$n$后为$n-1$的值，加上$1$就可以正确得到$n$的值。</p><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,q,f=<span class="hljs-number">0</span>,a[<span class="hljs-number">1000005</span>];<span class="hljs-comment">//数组</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        a[i]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        <span class="hljs-type">int</span> op;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//第一种操作</span><br>            <span class="hljs-type">int</span> p,x;<br>            cin&gt;&gt;p&gt;&gt;x;<br>            <span class="hljs-type">int</span> pos=(f+p<span class="hljs-number">-1</span>)%n<span class="hljs-number">+1</span>;<span class="hljs-comment">//计算下标</span><br>            a[pos]=x;<span class="hljs-comment">//修改</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//第二种操作</span><br>            <span class="hljs-type">int</span> p;<br>            cin&gt;&gt;p;<br>            <span class="hljs-type">int</span> pos=(f+p<span class="hljs-number">-1</span>)%n<span class="hljs-number">+1</span>;<span class="hljs-comment">//计算下标</span><br>            cout&lt;&lt;a[pos]&lt;&lt;endl;<span class="hljs-comment">//输出</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//第三种操作</span><br>            <span class="hljs-type">int</span> p;<br>            cin&gt;&gt;p;<br>            f=(f+p)%n;<span class="hljs-comment">//计算偏移量</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：洛谷P1271</title>
    <link href="/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P1271/"/>
    <url>/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9A%E6%B4%9B%E8%B0%B7P1271/</url>
    
    <content type="html"><![CDATA[<h1>洛谷P1271题解</h1><h2 id="题目简介">题目简介</h2><p>给定一个序列$A$，将这个序列排序后输出。</p><p>$n \leq 999$，$m \leq 2000000$</p><h2 id="解题方法">解题方法</h2><p>因为数据范围使用<code>快排</code>不会<code>TLE</code>，所以直接读入数组直接<code>sort()</code>就可以了。</p><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,a[<span class="hljs-number">2000005</span>];<span class="hljs-comment">//数组</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<span class="hljs-comment">//读入</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        cin&gt;&gt;a[i];<span class="hljs-comment">//读入序列</span><br>    <span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a+m<span class="hljs-number">+1</span>);<span class="hljs-comment">//快排</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<span class="hljs-comment">//输出排序后的数列</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：ABC411B</title>
    <link href="/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC411B/"/>
    <url>/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC411B/</url>
    
    <content type="html"><![CDATA[<h1>题解：ABC411B</h1><h2 id="题目简介">题目简介</h2><p>给定一个序列中两项元素的差，求出两个点之间的距离。</p><h2 id="解题方法">解题方法</h2><p>因为数据范围<strong>较小</strong>，$2 \leq N \leq 50$，所以可以使用$O(n^2)$的解法也不会<code>TLE</code>。</p><p>暴力枚举$i$和$j$，然后累加就可以了。</p><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">55</span>);<span class="hljs-comment">//序列</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>        cin&gt;&gt;a[i];<span class="hljs-comment">//读入整个序列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<span class="hljs-comment">//暴力枚举</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;k++)<br>                ans+=a[k];<span class="hljs-comment">//计算距离</span><br>            cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//输出</span><br>        &#125;<br>        cout&lt;&lt;endl;<span class="hljs-comment">//换行</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：ABC411C</title>
    <link href="/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC411C/"/>
    <url>/2025/06/24/%E9%A2%98%E8%A7%A3%EF%BC%9AABC411C/</url>
    
    <content type="html"><![CDATA[<h1>题解：ABC 411 C</h1><h2 id="题目简介">题目简介</h2><p>给定一个长度为$N$的序列，初始所有所有格子都是白色，有$Q$个操作，每次给定一个操作数$A_i$，将$A_i$的颜色反转，并求出序列中有几个黑色子序列。</p><h2 id="解题方法">解题方法</h2><p>因为更改$A_i$的颜色只会影响到$A_i-1$和$A_i+1$，所以只用考虑黑色子序列的个数以及$A_i-1$和$A_i+1$的变化。</p><h3 id="假设使用1表示白，0表示黑：">假设使用<code>1</code>表示白，<code>0</code>表示黑：</h3><p>如果$A_i-1$和$A_i+1$为一黑一白，则修改当前颜色只会延长子序列的长度，不会增加数量。</p><p><code>1 1 0</code>-&gt;<code>1 0 0</code>数量没有变化。</p><p><code>1 0 0</code>-&gt;<code>1 1 0</code>数量依然没有变化。</p><p>所以$A_i-1$和$A_i+1$的颜色<strong>相同</strong>，则会发生变化。</p><h3 id="分两种情况分类讨论：">分两种情况分类讨论：</h3><p><strong>如果$A_i$反转后为黑色：</strong></p><ol><li><p>原序列：<code>1 0 1</code>-&gt;<code>1 1 1</code>，容易发现数量减少了<code>1</code>。</p></li><li><p>原序列：<code>0 0 0</code>-&gt;<code>0 1 0</code>，容易发现数量增加了<code>1</code>。</p></li></ol><p><strong>如果$A_i$反转后为白色：</strong></p><ol><li><p>原序列：<code>1 1 1</code>-&gt;<code>1 0 1</code>，容易发现数量增加了<code>1</code>。</p></li><li><p>原序列：<code>0 1 0</code>-&gt;<code>0 0 0</code>，容易发现数量减少了<code>1</code>。</p></li></ol><hr><p>容易发现两种情况<strong>相反</strong>。</p><h3 id="注意最后的数量最多为0，所以数量在处理时要注意特殊处理。">注意最后的数量最多为<code>0</code>，所以数量在处理时要注意特殊处理。</h3><h2 id="解题代码">解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,q,sum=<span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">500005</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//存储序列</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        a[x]^=<span class="hljs-number">1</span>;<span class="hljs-comment">//反转当前状态</span><br>        <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果当前反转后为1</span><br>            <span class="hljs-keyword">if</span>(a[x<span class="hljs-number">+1</span>]==<span class="hljs-number">1</span> &amp;&amp; a[x<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<span class="hljs-comment">//第一种情况</span><br>                sum++;<span class="hljs-comment">//增加</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[x<span class="hljs-number">+1</span>]==<span class="hljs-number">0</span> &amp;&amp; a[x<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)<span class="hljs-comment">//第二种情况</span><br>                sum--;<span class="hljs-comment">//减少</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(a[x<span class="hljs-number">+1</span>]==<span class="hljs-number">1</span> &amp;&amp; a[x<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<span class="hljs-comment">//第一种情况</span><br>                sum--;<span class="hljs-comment">//减少</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[x<span class="hljs-number">+1</span>]==<span class="hljs-number">0</span> &amp;&amp; a[x<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)<span class="hljs-comment">//第二种情况</span><br>                sum++;<span class="hljs-comment">//增加</span><br>        &#125;<br>        sum=<span class="hljs-built_in">max</span>(sum,<span class="hljs-number">0</span>);<span class="hljs-comment">//避免减到负数</span><br>        cout&lt;&lt;sum&lt;&lt;endl;<span class="hljs-comment">//输出答案</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
